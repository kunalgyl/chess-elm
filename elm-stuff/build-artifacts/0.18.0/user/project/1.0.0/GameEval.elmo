var _user$project$GameEval$pieceScope = function (sqs) {
	return _elm_lang$core$List$length(sqs);
};
var _user$project$GameEval$threats = F3(
	function (b, p, sqs) {
		return _elm_lang$core$List$length(
			A2(
				_elm_lang$core$List$filter,
				A2(
					_user$project$Game$isOccupiedByPl,
					b,
					_user$project$PColor$otherColor(p)),
				sqs));
	});
var _user$project$GameEval$centerControl = F2(
	function (b, p) {
		var center = {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 3, _1: 3},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 3, _1: 4},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 4, _1: 3},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 4, _1: 4},
						_1: {ctor: '[]'}
					}
				}
			}
		};
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return x + y;
				}),
			0,
			A2(
				_elm_lang$core$List$map,
				A2(_user$project$Game$sqInAttackTimes, b, p),
				center));
	});
var _user$project$GameEval$material = F2(
	function (b, p) {
		var countMaterial = F2(
			function (bsq, acc) {
				var _p0 = bsq;
				if (_p0.ctor === 'NotEmpty') {
					return _elm_lang$core$Native_Utils.eq(_p0._0, p) ? (acc + _user$project$Piece$toPoint(_p0._1)) : acc;
				} else {
					return acc;
				}
			});
		return A3(
			_elm_lang$core$List$foldr,
			countMaterial,
			0.0,
			_chendrix$elm_matrix$Matrix$flatten(b));
	});
var _user$project$GameEval$development = F2(
	function (b, p) {
		var l_loc_b = _chendrix$elm_matrix$Matrix$flatten(
			A2(
				_chendrix$elm_matrix$Matrix$mapWithLocation,
				F2(
					function (loc, a) {
						return {ctor: '_Tuple2', _0: loc, _1: a};
					}),
				b));
		var p_rank = _elm_lang$core$Native_Utils.eq(p, _user$project$PColor$White) ? 0 : 7;
		var countDeveloped = F2(
			function (_p1, acc) {
				var _p2 = _p1;
				var _p5 = _p2._0;
				var _p3 = _p2._1;
				if (_p3.ctor === 'NotEmpty') {
					if (!_elm_lang$core$Native_Utils.eq(_p3._0, p)) {
						return acc;
					} else {
						var _p4 = _p3._1;
						switch (_p4.ctor) {
							case 'Q':
								return _elm_lang$core$Native_Utils.eq(
									_p5,
									{ctor: '_Tuple2', _0: p_rank, _1: 3}) ? acc : (acc + 1);
							case 'R':
								return (_elm_lang$core$Native_Utils.eq(
									_p5,
									{ctor: '_Tuple2', _0: p_rank, _1: 0}) || _elm_lang$core$Native_Utils.eq(
									_p5,
									{ctor: '_Tuple2', _0: p_rank, _1: 7})) ? acc : (acc + 1);
							case 'B':
								return (_elm_lang$core$Native_Utils.eq(
									_p5,
									{ctor: '_Tuple2', _0: p_rank, _1: 2}) || _elm_lang$core$Native_Utils.eq(
									_p5,
									{ctor: '_Tuple2', _0: p_rank, _1: 5})) ? acc : (acc + 1);
							case 'Kn':
								return (_elm_lang$core$Native_Utils.eq(
									_p5,
									{ctor: '_Tuple2', _0: p_rank, _1: 1}) || _elm_lang$core$Native_Utils.eq(
									_p5,
									{ctor: '_Tuple2', _0: p_rank, _1: 6})) ? acc : (acc + 1);
							default:
								return acc;
						}
					}
				} else {
					return acc;
				}
			});
		return A3(_elm_lang$core$List$foldr, countDeveloped, 0, l_loc_b);
	});
var _user$project$GameEval$evaluateColor = F3(
	function (b, p, sqs) {
		return (((0.1 * _elm_lang$core$Basics$toFloat(
			A2(_user$project$GameEval$development, b, p))) + A2(_user$project$GameEval$material, b, p)) + (5.0e-2 * _elm_lang$core$Basics$toFloat(
			A3(_user$project$GameEval$threats, b, p, sqs)))) + (2.0e-2 * _elm_lang$core$Basics$toFloat(
			_user$project$GameEval$pieceScope(sqs)));
	});
var _user$project$GameEval$evaluate = F3(
	function (b, cbs, mi) {
		var sqs_white = A4(_user$project$Game$validSquaresWithoutLegality, b, cbs, _user$project$PColor$White, mi);
		var sqs_black = A4(_user$project$Game$validSquaresWithoutLegality, b, cbs, _user$project$PColor$Black, mi);
		return A3(_user$project$GameEval$evaluateColor, b, _user$project$PColor$Black, sqs_black) - A3(_user$project$GameEval$evaluateColor, b, _user$project$PColor$White, sqs_white);
	});
var _user$project$GameEval$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return function (x) {
																								return function (y) {
																									return function (z) {
																										return function (_1) {
																											return {board: a, clicked: b, moves: c, castles: d, kposs: e, turn: f, black_captured: g, white_captured: h, mv_history: i, check_sq: j, history: k, paused: l, black_time: m, white_time: n, status: o, boards: p, viewing_history: q, mv_history_idx: r, black_ai: s, white_ai: t, suggestion: u, evaluate: v, evaluation: w, second_rank_move_file: x, fen_content: y, previous_delay: z, depth: _1};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$GameEval$PrevModel = function (a) {
	return {ctor: 'PrevModel', _0: a};
};
var _user$project$GameEval$Victory = function (a) {
	return {ctor: 'Victory', _0: a};
};
var _user$project$GameEval$Draw = {ctor: 'Draw'};
var _user$project$GameEval$Progress = {ctor: 'Progress'};
