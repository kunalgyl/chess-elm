var _user$project$Square$toOtherColorString = function (s) {
	var _p0 = s;
	var r = _p0._0;
	var c = _p0._1;
	var idx = r + c;
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], idx, 2),
		0) ? '#e6e600' : '#ffff66';
};
var _user$project$Square$toColorString = function (s) {
	var _p1 = s;
	var r = _p1._0;
	var c = _p1._1;
	var idx = r + c;
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], idx, 2),
		0) ? '#00e68a' : 'white';
};
var _user$project$Square$toAlpha = function (i) {
	return ((_elm_lang$core$Native_Utils.cmp(i, 1) > -1) && (_elm_lang$core$Native_Utils.cmp(i, 8) < 1)) ? _elm_lang$core$String$fromChar(
		_elm_lang$core$Char$fromCode(i + 64)) : A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Native_Utils.crash(
			'Square',
			{
				start: {line: 40, column: 10},
				end: {line: 40, column: 21}
			})('invalid column: \''),
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(i),
			'\''));
};
var _user$project$Square$toStr = function (s) {
	var _p2 = s;
	var r = _p2._0;
	var c = _p2._1;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Square$toAlpha(c + 1),
		_elm_lang$core$Basics$toString(r + 1));
};
var _user$project$Square$isValid = function (sq) {
	var _p3 = sq;
	var r = _p3._0;
	var c = _p3._1;
	return (_elm_lang$core$Native_Utils.cmp(r, 0) > -1) && ((_elm_lang$core$Native_Utils.cmp(r, 7) < 1) && ((_elm_lang$core$Native_Utils.cmp(c, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(c, 7) < 1)));
};
var _user$project$Square$sq = F2(
	function (r, c) {
		var s = {ctor: '_Tuple2', _0: r, _1: c};
		var valid = _user$project$Square$isValid(s);
		return valid ? s : _elm_lang$core$Native_Utils.crash(
			'Square',
			{
				start: {line: 17, column: 14},
				end: {line: 17, column: 25}
			})(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Invalid square: (',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(r),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(c),
							')')))));
	});
