var _user$project$GameApp$fileToInt = function (c) {
	return A2(
		_elm_lang$core$Basics$max,
		0,
		A2(
			_elm_lang$core$Basics$min,
			7,
			_elm_lang$core$Char$toCode(c) - 97));
};
var _user$project$GameApp$moveAttackComp = F2(
	function (b, _p0) {
		var _p1 = _p0;
		return A2(_user$project$Game$isOccupied, b, _p1._1) ? 1 : 0;
	});
var _user$project$GameApp$findMinBy = F2(
	function (l, f) {
		var fold_helper = F2(
			function (a, acc) {
				var comp = f(a);
				return (_elm_lang$core$Native_Utils.cmp(
					comp,
					_elm_lang$core$Tuple$first(acc)) < 0) ? {ctor: '_Tuple2', _0: comp, _1: a} : acc;
			});
		var _p2 = l;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p3 = _p2._0;
			return _elm_lang$core$Maybe$Just(
				_elm_lang$core$Tuple$second(
					A3(
						_elm_lang$core$List$foldr,
						fold_helper,
						{
							ctor: '_Tuple2',
							_0: f(_p3),
							_1: _p3
						},
						_p2._1)));
		}
	});
var _user$project$GameApp$findMaxBy = F2(
	function (l, f) {
		var fold_helper = F2(
			function (a, acc) {
				var comp = f(a);
				return (_elm_lang$core$Native_Utils.cmp(
					comp,
					_elm_lang$core$Tuple$first(acc)) > 0) ? {ctor: '_Tuple2', _0: comp, _1: a} : acc;
			});
		var _p4 = l;
		if (_p4.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p5 = _p4._0;
			return _elm_lang$core$Maybe$Just(
				_elm_lang$core$Tuple$second(
					A3(
						_elm_lang$core$List$foldr,
						fold_helper,
						{
							ctor: '_Tuple2',
							_0: f(_p5),
							_1: _p5
						},
						_p4._1)));
		}
	});
var _user$project$GameApp$modelMoves = function (m) {
	return A5(_user$project$Game$validMoves, m.board, m.castles, m.turn, m.second_rank_move_file, m.kposs);
};
var _user$project$GameApp$statusIsProgress = function (s) {
	var _p6 = s;
	if (_p6.ctor === 'Progress') {
		return true;
	} else {
		return false;
	}
};
var _user$project$GameApp$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Time$every,
				100 * _elm_lang$core$Time$millisecond,
				function (_p7) {
					return _user$project$GameDraw$Tick;
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Time$every,
					200 * _elm_lang$core$Time$millisecond,
					function (_p8) {
						return _user$project$GameDraw$CheckAI;
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$keyboard$Keyboard$downs(
						function (keyCode) {
							return _elm_lang$core$Native_Utils.eq(keyCode, 37) ? _user$project$GameDraw$MvIndexUpdate(1) : _user$project$GameDraw$Noop;
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$keyboard$Keyboard$downs(
							function (keyCode) {
								return _elm_lang$core$Native_Utils.eq(keyCode, 39) ? _user$project$GameDraw$MvIndexUpdate(-1) : _user$project$GameDraw$Noop;
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$GameApp$maybeDeficitColor = F2(
	function (m, p) {
		var bv = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return x + y;
				}),
			0,
			A2(_elm_lang$core$List$map, _user$project$Piece$toPointSimple, m.black_captured));
		var wv = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return x + y;
				}),
			0,
			A2(_elm_lang$core$List$map, _user$project$Piece$toPointSimple, m.white_captured));
		return _elm_lang$core$Native_Utils.eq(p, _user$project$PColor$White) ? ((_elm_lang$core$Native_Utils.cmp(wv, bv) > 0) ? _elm_lang$core$Maybe$Just(wv - bv) : _elm_lang$core$Maybe$Nothing) : ((_elm_lang$core$Native_Utils.cmp(bv, wv) > 0) ? _elm_lang$core$Maybe$Just(bv - wv) : _elm_lang$core$Maybe$Nothing);
	});
var _user$project$GameApp$view = function (m) {
	var standard_stuff = {
		ctor: '::',
		_0: A5(
			_user$project$GameDraw$drawCapturedCastles,
			_user$project$PColor$Black,
			m.black_captured,
			m.castles,
			A2(_user$project$GameApp$maybeDeficitColor, m, _user$project$PColor$Black),
			m.black_time),
		_1: {
			ctor: '::',
			_0: A5(_user$project$GameDraw$drawBoard, m.board, m.clicked, m.check_sq, m.moves, m.suggestion),
			_1: {
				ctor: '::',
				_0: A5(
					_user$project$GameDraw$drawCapturedCastles,
					_user$project$PColor$White,
					m.white_captured,
					m.castles,
					A2(_user$project$GameApp$maybeDeficitColor, m, _user$project$PColor$White),
					m.white_time),
				_1: {ctor: '[]'}
			}
		}
	};
	var game_window = function () {
		var _p9 = m.status;
		switch (_p9.ctor) {
			case 'Draw':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						standard_stuff,
						{
							ctor: '::',
							_0: _user$project$GameDraw$drawBox('It\'s A Draw...'),
							_1: {ctor: '[]'}
						}));
			case 'Victory':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						standard_stuff,
						{
							ctor: '::',
							_0: _user$project$GameDraw$drawBox(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$PColor$toString(_p9._0),
									' Wins!')),
							_1: {ctor: '[]'}
						}));
			default:
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					standard_stuff);
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'margin', _1: '0 auto'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '610px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '50px'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: game_window,
			_1: {
				ctor: '::',
				_0: A6(_user$project$GameDraw$drawHistory, m.mv_history, m.depth, m.evaluate, m.black_ai, m.evaluation, m.paused),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$GameApp$changeIdx = F2(
	function (model, idx) {
		var new_idx = (_elm_lang$core$Native_Utils.cmp(idx, 0) < 0) ? 0 : ((_elm_lang$core$Native_Utils.cmp(
			idx,
			_elm_lang$core$List$length(model.mv_history)) > 0) ? _elm_lang$core$List$length(model.mv_history) : idx);
		return _elm_lang$core$Native_Utils.eq(new_idx, 0) ? _elm_lang$core$Native_Utils.update(
			model,
			{
				board: A2(
					_user$project$Game$justGet,
					_elm_lang$core$List$head(model.boards),
					'update - impossible'),
				viewing_history: false,
				mv_history_idx: _elm_lang$core$Maybe$Nothing
			}) : _elm_lang$core$Native_Utils.update(
			model,
			{
				board: A2(
					_user$project$Game$justGet,
					A2(_user$project$Game$takenth, model.boards, new_idx),
					'update - impossible'),
				viewing_history: true,
				moves: {ctor: '[]'},
				clicked: _elm_lang$core$Maybe$Nothing,
				check_sq: _elm_lang$core$Maybe$Nothing,
				mv_history_idx: _elm_lang$core$Maybe$Just(new_idx),
				suggestion: _elm_lang$core$Maybe$Nothing
			});
	});
var _user$project$GameApp$checkAI = F2(
	function (m, p) {
		return _elm_lang$core$Native_Utils.eq(p, _user$project$PColor$White) ? m.white_ai : m.black_ai;
	});
var _user$project$GameApp$makeNewModelSimple = F3(
	function (m, sq_s, sq_d) {
		var _p10 = A5(_user$project$Game$makeMove, m.board, m.castles, sq_s, sq_d, m.kposs);
		var new_board = _p10._0;
		var new_castles = _p10._1;
		var new_kposs = _p10._3;
		var new_srm = _p10._4;
		return _elm_lang$core$Native_Utils.update(
			m,
			{
				board: new_board,
				castles: new_castles,
				kposs: new_kposs,
				turn: _user$project$PColor$otherColor(m.turn),
				second_rank_move_file: new_srm
			});
	});
var _user$project$GameApp$negamax = F5(
	function (d, a, b, p, m) {
		var _p11 = m.status;
		switch (_p11.ctor) {
			case 'Victory':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.eq(p, _p11._0) ? 10000.0 : -10000.0,
					_1: {
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple2', _0: 0, _1: 0},
						_1: {ctor: '_Tuple2', _0: 0, _1: 0}
					}
				};
			case 'Draw':
				return {
					ctor: '_Tuple2',
					_0: 0,
					_1: {
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple2', _0: 0, _1: 0},
						_1: {ctor: '_Tuple2', _0: 0, _1: 0}
					}
				};
			default:
				if (_elm_lang$core$Native_Utils.eq(d, 0)) {
					return {
						ctor: '_Tuple2',
						_0: A3(_user$project$GameEval$evaluate, m.board, m.castles, m.second_rank_move_file) * (_elm_lang$core$Native_Utils.eq(p, _user$project$PColor$White) ? -1.0 : 1.0),
						_1: {
							ctor: '_Tuple2',
							_0: {ctor: '_Tuple2', _0: 0, _1: 0},
							_1: {ctor: '_Tuple2', _0: 0, _1: 0}
						}
					};
				} else {
					var mvs = A2(
						_elm_lang$core$List$sortBy,
						_user$project$GameApp$moveAttackComp(m.board),
						_user$project$GameApp$modelMoves(m));
					var evalChild = F3(
						function (a, l_mvs, _p12) {
							evalChild:
							while (true) {
								var _p13 = _p12;
								var _p19 = _p13._0;
								var _p18 = _p13._1;
								var _p14 = l_mvs;
								if (_p14.ctor === '[]') {
									return {ctor: '_Tuple2', _0: _p19, _1: _p18};
								} else {
									var _p17 = _p14._0._0;
									var _p16 = _p14._0._1;
									var new_m = A3(_user$project$GameApp$makeNewModelSimple, m, _p17, _p16);
									var v = -1 * _elm_lang$core$Tuple$first(
										A5(
											_user$project$GameApp$negamax,
											d - 1,
											0 - b,
											0 - a,
											_user$project$PColor$otherColor(p),
											new_m));
									var _p15 = (_elm_lang$core$Native_Utils.cmp(v, _p19) > 0) ? {
										ctor: '_Tuple2',
										_0: v,
										_1: {ctor: '_Tuple2', _0: _p17, _1: _p16}
									} : {ctor: '_Tuple2', _0: _p19, _1: _p18};
									var new_best = _p15._0;
									var new_best_move = _p15._1;
									var new_a = A2(_elm_lang$core$Basics$max, a, v);
									if (_elm_lang$core$Native_Utils.cmp(new_a, b) > -1) {
										return {ctor: '_Tuple2', _0: new_best, _1: new_best_move};
									} else {
										var _v8 = new_a,
											_v9 = _p14._1,
											_v10 = {ctor: '_Tuple2', _0: new_best, _1: new_best_move};
										a = _v8;
										l_mvs = _v9;
										_p12 = _v10;
										continue evalChild;
									}
								}
							}
						});
					return A3(
						evalChild,
						a,
						mvs,
						{
							ctor: '_Tuple2',
							_0: -10000,
							_1: {
								ctor: '_Tuple2',
								_0: {ctor: '_Tuple2', _0: 0, _1: 0},
								_1: {ctor: '_Tuple2', _0: 0, _1: 0}
							}
						});
				}
		}
	});
var _user$project$GameApp$findMoveNegaMax = function (m) {
	var poss_mv = _elm_lang$core$Tuple$second(
		A5(_user$project$GameApp$negamax, m.depth, -10000, 10000, m.turn, m));
	return _elm_lang$core$Native_Utils.eq(
		poss_mv,
		{
			ctor: '_Tuple2',
			_0: {ctor: '_Tuple2', _0: 0, _1: 0},
			_1: {ctor: '_Tuple2', _0: 0, _1: 0}
		}) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(poss_mv);
};
var _user$project$GameApp$aiMove = function (m) {
	var mv = _user$project$GameApp$findMoveNegaMax(m);
	return _elm_lang$core$Task$succeed(
		A2(_user$project$Game$justGet, mv, 'aiMove - impossible'));
};
var _user$project$GameApp$findMoveAsync = function (m) {
	return _elm_lang$core$Task$succeed(
		_user$project$GameApp$findMoveNegaMax(m));
};
var _user$project$GameApp$makeNewModel = F3(
	function (m, sq_s, s) {
		var _p20 = A5(_user$project$Game$makeMove, m.board, m.castles, sq_s, s, m.kposs);
		var new_board = _p20._0;
		var new_castles = _p20._1;
		var captured = _p20._2;
		var new_kposs = _p20._3;
		var new_srm = _p20._4;
		var mv = _p20._5;
		return _elm_lang$core$Native_Utils.update(
			m,
			{
				board: new_board,
				clicked: _elm_lang$core$Maybe$Nothing,
				moves: {ctor: '[]'},
				castles: new_castles,
				kposs: new_kposs,
				turn: _user$project$PColor$otherColor(m.turn),
				black_captured: A2(
					_elm_lang$core$Basics_ops['++'],
					m.black_captured,
					(_elm_lang$core$Native_Utils.eq(m.turn, _user$project$PColor$Black) && _user$project$Game$isJust(captured)) ? {
						ctor: '::',
						_0: A2(_user$project$Game$justGet, captured, 'clickSquare - impossible'),
						_1: {ctor: '[]'}
					} : {ctor: '[]'}),
				white_captured: A2(
					_elm_lang$core$Basics_ops['++'],
					m.white_captured,
					(_elm_lang$core$Native_Utils.eq(m.turn, _user$project$PColor$White) && _user$project$Game$isJust(captured)) ? {
						ctor: '::',
						_0: A2(_user$project$Game$justGet, captured, 'clickSquare - impossible'),
						_1: {ctor: '[]'}
					} : {ctor: '[]'}),
				mv_history: {ctor: '::', _0: mv, _1: m.mv_history},
				check_sq: function () {
					var next_player = _user$project$PColor$otherColor(m.turn);
					return A2(_user$project$Game$kingInCheck, new_board, next_player);
				}(),
				history: {
					ctor: '::',
					_0: _user$project$GameEval$PrevModel(
						_elm_lang$core$Native_Utils.update(
							m,
							{
								history: {ctor: '[]'},
								suggestion: _elm_lang$core$Maybe$Nothing,
								mv_history: {ctor: '[]'},
								boards: {ctor: '[]'}
							})),
					_1: m.history
				},
				paused: m.paused,
				black_time: m.black_time,
				white_time: m.white_time,
				status: function () {
					var other_player = _user$project$PColor$otherColor(m.turn);
					return _elm_lang$core$List$isEmpty(
						A5(_user$project$Game$validSquares, new_board, new_castles, other_player, new_srm, new_kposs)) ? (_user$project$Game$isJust(
						A2(_user$project$Game$kingInCheck, new_board, other_player)) ? _user$project$GameEval$Victory(m.turn) : _user$project$GameEval$Draw) : _user$project$GameEval$Progress;
				}(),
				boards: {ctor: '::', _0: new_board, _1: m.boards},
				suggestion: _elm_lang$core$Maybe$Nothing,
				evaluation: A3(_user$project$GameEval$evaluate, new_board, new_castles, new_srm),
				second_rank_move_file: new_srm,
				previous_delay: _elm_lang$core$Maybe$Nothing
			});
	});
var _user$project$GameApp$clickSquare = F2(
	function (m, s) {
		if (A2(_elm_lang$core$List$member, s, m.moves)) {
			var sq_s = A2(_user$project$Game$justGet, m.clicked, 'clickSquare - impossible');
			return A3(_user$project$GameApp$makeNewModel, m, sq_s, s);
		} else {
			var bsq = A2(
				_user$project$Game$justGet,
				A2(_chendrix$elm_matrix$Matrix$get, s, m.board),
				'clickSquare - impossible');
			var _p21 = function () {
				var _p22 = {ctor: '_Tuple2', _0: bsq, _1: m.paused || m.viewing_history};
				_v11_0:
				do {
					if (_p22._0.ctor === 'Empty') {
						if (_p22._1 === true) {
							break _v11_0;
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Nothing,
								_1: {ctor: '[]'}
							};
						}
					} else {
						if (_p22._1 === true) {
							break _v11_0;
						} else {
							var _p23 = _p22._0._0;
							return (_user$project$Game$isJust(m.clicked) && _elm_lang$core$Native_Utils.eq(
								A2(_user$project$Game$justGet, m.clicked, 'clickSquare - impossible'),
								s)) ? {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Nothing,
								_1: {ctor: '[]'}
							} : ((_elm_lang$core$Native_Utils.eq(_p23, m.turn) && (!A2(_user$project$GameApp$checkAI, m, _p23))) ? {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(s),
								_1: A5(_user$project$Game$sqMoves, m.board, m.castles, s, m.second_rank_move_file, m.kposs)
							} : {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Nothing,
								_1: {ctor: '[]'}
							});
						}
					}
				} while(false);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Nothing,
					_1: {ctor: '[]'}
				};
			}();
			var c = _p21._0;
			var ms = _p21._1;
			return _elm_lang$core$Native_Utils.update(
				m,
				{clicked: c, moves: ms});
		}
	});
var _user$project$GameApp$initialModel = {
	ctor: '_Tuple2',
	_0: {
		board: _user$project$Board$startingBoard,
		clicked: _elm_lang$core$Maybe$Nothing,
		moves: {ctor: '[]'},
		castles: {wsc: true, wlc: true, bsc: true, blc: true},
		kposs: {
			w: {ctor: '_Tuple2', _0: 0, _1: 4},
			b: {ctor: '_Tuple2', _0: 7, _1: 4}
		},
		turn: _user$project$PColor$White,
		black_captured: {ctor: '[]'},
		white_captured: {ctor: '[]'},
		mv_history: {ctor: '[]'},
		check_sq: _elm_lang$core$Maybe$Nothing,
		history: {ctor: '[]'},
		paused: false,
		black_time: 3000,
		white_time: 3000,
		status: _user$project$GameEval$Progress,
		boards: {
			ctor: '::',
			_0: _user$project$Board$startingBoard,
			_1: {ctor: '[]'}
		},
		viewing_history: false,
		mv_history_idx: _elm_lang$core$Maybe$Nothing,
		black_ai: false,
		white_ai: false,
		suggestion: _elm_lang$core$Maybe$Nothing,
		evaluate: false,
		evaluation: 0.0,
		second_rank_move_file: _elm_lang$core$Maybe$Nothing,
		fen_content: '',
		previous_delay: _elm_lang$core$Maybe$Nothing,
		depth: 2
	},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$GameApp$fromFEN = function (s) {
	var ss = A2(_elm_lang$core$String$split, ' ', s);
	var _p24 = ss;
	if ((((_p24.ctor === '::') && (_p24._1.ctor === '::')) && (_p24._1._1.ctor === '::')) && (_p24._1._1._1.ctor === '::')) {
		var _p25 = _p24._1._1._0;
		var new_board = _user$project$Board$processBoard(_p24._0);
		var new_turn = _elm_lang$core$Native_Utils.eq(_p24._1._0, 'b') ? _user$project$PColor$Black : _user$project$PColor$White;
		var new_wsc = A2(_elm_lang$core$String$contains, 'K', _p25);
		var new_wlc = A2(_elm_lang$core$String$contains, 'Q', _p25);
		var new_bsc = A2(_elm_lang$core$String$contains, 'k', _p25);
		var new_blc = A2(_elm_lang$core$String$contains, 'q', _p25);
		var new_castles = {wsc: new_wsc, wlc: new_wlc, bsc: new_bsc, blc: new_blc};
		var c_es = A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Native_Utils.chr('_'),
			_elm_lang$core$List$head(
				_elm_lang$core$String$toList(_p24._1._1._1._0)));
		var c_es_d = _elm_lang$core$Char$fromCode(
			A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				48,
				_user$project$GameApp$fileToInt(c_es)));
		var new_srm = _elm_lang$core$Char$isDigit(c_es_d) ? _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$core$Basics$min,
				7,
				_user$project$Board$ctoi(c_es_d))) : _elm_lang$core$Maybe$Nothing;
		var im = _elm_lang$core$Tuple$first(_user$project$GameApp$initialModel);
		return _elm_lang$core$Native_Utils.update(
			im,
			{board: new_board, turn: new_turn, castles: new_castles, second_rank_move_file: new_srm});
	} else {
		return _elm_lang$core$Tuple$first(_user$project$GameApp$initialModel);
	}
};
var _user$project$GameApp$update = F2(
	function (msg, model) {
		var _p26 = msg;
		switch (_p26.ctor) {
			case 'ClickSquare':
				var new_m = A2(_user$project$GameApp$clickSquare, model, _p26._0);
				var new_cmd = _elm_lang$core$Platform_Cmd$none;
				return {ctor: '_Tuple2', _0: new_m, _1: new_cmd};
			case 'Reset':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Tuple$first(_user$project$GameApp$initialModel),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Previous':
				if (_elm_lang$core$List$isEmpty(model.history)) {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var _p27 = A2(
						_user$project$Game$justGet,
						_elm_lang$core$List$head(model.history),
						'update - impossible');
					var prev_m = _p27._0;
					var new_m = _elm_lang$core$Native_Utils.update(
						prev_m,
						{
							black_time: model.black_time,
							white_time: model.white_time,
							moves: {ctor: '[]'},
							clicked: _elm_lang$core$Maybe$Nothing,
							mv_history: A2(
								_user$project$Game$justGet,
								_elm_lang$core$List$tail(model.mv_history),
								'update - impossible'),
							history: A2(
								_user$project$Game$justGet,
								_elm_lang$core$List$tail(model.history),
								'update - impossible'),
							boards: A2(
								_user$project$Game$justGet,
								_elm_lang$core$List$tail(model.boards),
								'update - impossible'),
							previous_delay: _elm_lang$core$Maybe$Just(0)
						});
					var new_cmd = _elm_lang$core$Platform_Cmd$none;
					return {ctor: '_Tuple2', _0: new_m, _1: new_cmd};
				}
			case 'Tick':
				return {
					ctor: '_Tuple2',
					_0: function () {
						if (model.paused || (!_elm_lang$core$Native_Utils.eq(model.status, _user$project$GameEval$Progress))) {
							return model;
						} else {
							var new_m = _elm_lang$core$Native_Utils.eq(model.turn, _user$project$PColor$White) ? _elm_lang$core$Native_Utils.update(
								model,
								{white_time: model.white_time - 1}) : _elm_lang$core$Native_Utils.update(
								model,
								{black_time: model.black_time - 1});
							return _elm_lang$core$Native_Utils.eq(new_m.black_time, 0) ? _elm_lang$core$Native_Utils.update(
								new_m,
								{
									status: _user$project$GameEval$Victory(_user$project$PColor$White)
								}) : (_elm_lang$core$Native_Utils.eq(new_m.white_time, 0) ? _elm_lang$core$Native_Utils.update(
								new_m,
								{
									status: _user$project$GameEval$Victory(_user$project$PColor$Black)
								}) : new_m);
						}
					}(),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Pause':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paused: !model.paused,
							moves: {ctor: '[]'},
							clicked: _elm_lang$core$Maybe$Nothing
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Increment':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.eq(_p26._0, _user$project$PColor$White) ? _elm_lang$core$Native_Utils.update(
						model,
						{white_time: model.white_time + 200}) : _elm_lang$core$Native_Utils.update(
						model,
						{black_time: model.black_time + 200}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Decrement':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.eq(_p26._0, _user$project$PColor$White) ? _elm_lang$core$Native_Utils.update(
						model,
						{
							white_time: (_elm_lang$core$Native_Utils.cmp(model.white_time, 200) > 0) ? (model.white_time - 200) : model.white_time
						}) : _elm_lang$core$Native_Utils.update(
						model,
						{
							black_time: (_elm_lang$core$Native_Utils.cmp(model.black_time, 200) > 0) ? (model.black_time - 200) : model.black_time
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MvHistory':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$GameApp$changeIdx, model, _p26._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MvIndexUpdate':
				var _p28 = _p26._0;
				return {
					ctor: '_Tuple2',
					_0: (!_user$project$Game$isJust(model.mv_history_idx)) ? A2(_user$project$GameApp$changeIdx, model, _p28) : A2(
						_user$project$GameApp$changeIdx,
						model,
						A2(_user$project$Game$justGet, model.mv_history_idx, 'update - impossible') + _p28),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Noop':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'TogAI':
				var new_m = _elm_lang$core$Native_Utils.eq(_p26._0, _user$project$PColor$White) ? _elm_lang$core$Native_Utils.update(
					model,
					{white_ai: !model.white_ai}) : _elm_lang$core$Native_Utils.update(
					model,
					{black_ai: !model.black_ai});
				var new_cmd = _elm_lang$core$Platform_Cmd$none;
				return {ctor: '_Tuple2', _0: new_m, _1: new_cmd};
			case 'Suggest':
				return _user$project$Game$isJust(model.suggestion) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{suggestion: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$core$Task$perform,
						_user$project$GameDraw$MakeSugg,
						_user$project$GameApp$findMoveAsync(model))
				};
			case 'MakeSugg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{suggestion: _p26._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'TogEval':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{evaluate: !model.evaluate}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MoveAI':
				var _p29 = _p26._0;
				var sq_s = _p29._0;
				var sq_d = _p29._1;
				return {
					ctor: '_Tuple2',
					_0: A3(_user$project$GameApp$makeNewModel, model, sq_s, sq_d),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Change':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{fen_content: _p26._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateFEN':
				var new_m = _user$project$GameApp$fromFEN(model.fen_content);
				var new_kposs = {
					w: A2(_user$project$Game$findKing, new_m.board, _user$project$PColor$White),
					b: A2(_user$project$Game$findKing, new_m.board, _user$project$PColor$Black)
				};
				var new_srm = new_m.second_rank_move_file;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						new_m,
						{
							fen_content: model.fen_content,
							kposs: new_kposs,
							status: function () {
								var other_player = _user$project$PColor$otherColor(new_m.turn);
								return _elm_lang$core$List$isEmpty(
									A5(_user$project$Game$validSquares, new_m.board, new_m.castles, new_m.turn, new_srm, new_kposs)) ? (_user$project$Game$isJust(
									A2(_user$project$Game$kingInCheck, new_m.board, new_m.turn)) ? _user$project$GameEval$Victory(other_player) : _user$project$GameEval$Draw) : _user$project$GameEval$Progress;
							}()
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'CheckAI':
				if (model.black_ai && (_elm_lang$core$Native_Utils.eq(model.turn, _user$project$PColor$Black) && _user$project$GameApp$statusIsProgress(model.status))) {
					var _p30 = model.previous_delay;
					if (_p30.ctor === 'Nothing') {
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: A2(
								_elm_lang$core$Task$perform,
								_user$project$GameDraw$MoveAI,
								_user$project$GameApp$aiMove(model))
						};
					} else {
						if (_p30._0 === 5) {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{previous_delay: _elm_lang$core$Maybe$Nothing}),
								_1: A2(
									_elm_lang$core$Task$perform,
									_user$project$GameDraw$MoveAI,
									_user$project$GameApp$aiMove(model))
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										previous_delay: _elm_lang$core$Maybe$Just(_p30._0 + 1)
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							depth: _elm_lang$core$Native_Utils.eq(model.depth, 2) ? 3 : 2
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$GameApp$main = _elm_lang$html$Html$program(
	{init: _user$project$GameApp$initialModel, view: _user$project$GameApp$view, update: _user$project$GameApp$update, subscriptions: _user$project$GameApp$subscriptions})();
