var _user$project$Piece$toString = F2(
	function (pc, p) {
		var _p0 = pc;
		switch (_p0.ctor) {
			case 'K':
				return _elm_lang$core$Native_Utils.eq(p, _user$project$PColor$White) ? '♔' : '♚';
			case 'Q':
				return _elm_lang$core$Native_Utils.eq(p, _user$project$PColor$White) ? '♕' : '♛';
			case 'R':
				return _elm_lang$core$Native_Utils.eq(p, _user$project$PColor$White) ? '♖' : '♜';
			case 'B':
				return _elm_lang$core$Native_Utils.eq(p, _user$project$PColor$White) ? '♗' : '♝';
			case 'Kn':
				return _elm_lang$core$Native_Utils.eq(p, _user$project$PColor$White) ? '♘' : '♞';
			default:
				return _elm_lang$core$Native_Utils.eq(p, _user$project$PColor$White) ? '♙' : '♟';
		}
	});
var _user$project$Piece$toStringAlt = function (pc) {
	var _p1 = pc;
	switch (_p1.ctor) {
		case 'K':
			return 'K';
		case 'Q':
			return 'Q';
		case 'R':
			return 'r';
		case 'B':
			return 'b';
		case 'Kn':
			return 'k';
		default:
			return 'p';
	}
};
var _user$project$Piece$toPointSimple = function (p) {
	var _p2 = p;
	switch (_p2.ctor) {
		case 'K':
			return 0;
		case 'Q':
			return 9;
		case 'R':
			return 5;
		case 'B':
			return 3;
		case 'Kn':
			return 3;
		default:
			return 1;
	}
};
var _user$project$Piece$toPoint = function (p) {
	var _p3 = p;
	switch (_p3.ctor) {
		case 'K':
			return 1000.0;
		case 'Q':
			return 9.94;
		case 'R':
			return 5.48;
		case 'B':
			return 3.5;
		case 'Kn':
			return 3.05;
		default:
			return 1.0;
	}
};
var _user$project$Piece$K = {ctor: 'K'};
var _user$project$Piece$Q = {ctor: 'Q'};
var _user$project$Piece$R = {ctor: 'R'};
var _user$project$Piece$B = {ctor: 'B'};
var _user$project$Piece$Kn = {ctor: 'Kn'};
var _user$project$Piece$P = {ctor: 'P'};
var _user$project$Piece$toPiece = function (c) {
	var _p4 = c;
	switch (_p4.valueOf()) {
		case 'K':
			return _user$project$Piece$K;
		case 'Q':
			return _user$project$Piece$Q;
		case 'r':
			return _user$project$Piece$R;
		case 'b':
			return _user$project$Piece$B;
		case 'k':
			return _user$project$Piece$Kn;
		case 'p':
			return _user$project$Piece$P;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Piece',
				{
					start: {line: 32, column: 5},
					end: {line: 39, column: 80}
				},
				_p4)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'incorrect piece: \'',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$String$fromChar(c),
						'\'')));
	}
};
